"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.returnTags = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const GET_POOLS_QUERY = `
  query GetPools($lastTimestamp: Int) {
    pools(
      first: 1000,
      orderBy: createdAtTimestamp,
      orderDirection: asc,
      where: { createdAtTimestamp_gt: $lastTimestamp }
    ) {
      id
      createdAtTimestamp
      token0 {
        id
        name
        symbol
      }
      token1 {
        id
        name
        symbol
      }
    }
  }
`;
function returnTags() {
    return __awaiter(this, void 0, void 0, function* () {
        let lastTimestamp = 0;
        let allPools = [];
        let isMore = true;
        while (isMore) {
            const response = yield (0, node_fetch_1.default)("https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Accept: "application/json",
                },
                body: JSON.stringify({
                    query: GET_POOLS_QUERY,
                    variables: { lastTimestamp: lastTimestamp },
                }),
            });
            if (!response.ok) {
                throw new Error(`Network response was not ok: ${response.statusText}`);
            }
            const result = (yield response.json());
            const pools = result.data.pools;
            allPools.push(...pools);
            if (pools.length < 1000) {
                isMore = false;
            }
            else {
                lastTimestamp = pools[pools.length - 1].createdAtTimestamp;
            }
        }
        return allPools;
    });
}
exports.returnTags = returnTags;
