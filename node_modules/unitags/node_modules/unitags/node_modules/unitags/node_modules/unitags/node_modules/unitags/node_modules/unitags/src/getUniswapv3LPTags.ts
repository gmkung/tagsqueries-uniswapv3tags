import fetch from "node-fetch";

interface Pool {
  id: string;
  createdAtTimestamp: number;
  token0: {
    id: string;
    name: string;
    symbol: string;
  };
  token1: {
    id: string;
    name: string;
    symbol: string;
  };
}

interface GraphQLResponse {
  data: {
    pools: Pool[];
  };
}

const GET_POOLS_QUERY = `
  query GetPools($lastTimestamp: Int) {
    pools(
      first: 1000,
      orderBy: createdAtTimestamp,
      orderDirection: asc,
      where: { createdAtTimestamp_gt: $lastTimestamp }
    ) {
      id
      createdAtTimestamp
      token0 {
        id
        name
        symbol
      }
      token1 {
        id
        name
        symbol
      }
    }
  }
`;

async function returnTags(): Promise<Pool[]> {
  let lastTimestamp = 0;
  let allPools: Pool[] = [];
  let isMore = true;

  while (isMore) {
    const response = await fetch(
      "https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3",
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
        body: JSON.stringify({
          query: GET_POOLS_QUERY,
          variables: { lastTimestamp: lastTimestamp },
        }),
      }
    );

    if (!response.ok) {
      throw new Error(`Network response was not ok: ${response.statusText}`);
    }

    const result = (await response.json()) as GraphQLResponse;
    const pools: Pool[] = result.data.pools;

    allPools.push(...pools);

    if (pools.length < 1000) {
      isMore = false;
    } else {
      lastTimestamp = pools[pools.length - 1].createdAtTimestamp;
    }
  }

  return allPools;
}

export { returnTags };
